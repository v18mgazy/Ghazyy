>
                          </td>
                          <td className="p-2">
                            <Input
                              type="number"
                              min="0"
                              step="0.01"
                              className="w-24 text-center mx-auto"
                              value={product.price}
                              onChange={(e) => updateProductPrice(product.productId, Number(e.target.value))}
                            />
                          </td>
                          <td className="p-2">
                            <Input
                              type="number"
                              min="0"
                              step="0.01"
                              className="w-24 text-center mx-auto"
                              value={product.discount || 0}
                              onChange={(e) => updateProductDiscount(product.productId, Number(e.target.value))}
                            />
                          </td>
                          <td className="p-2 text-center font-medium">
                            {product.total.toFixed(2)}
                          </td>
                          <td className="p-2 text-center">
                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-8 w-8 text-destructive"
                              onClick={() => removeProduct(product.productId)}
                              title={t('remove')}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                
                {/* إضافة منتج جديد */}
                <div className="space-y-1 pt-2">
                  <h4 className="text-sm font-medium">{t('add_product')}</h4>
                  <div className="flex flex-wrap gap-2">
                    <select
                      className="p-2 border rounded-md flex-1"
                      onChange={(e) => {
                        const productId = Number(e.target.value);
                        if (!productId) return;
                        
                        // العثور على المنتج من قائمة المنتجات
                        const productsArray = Array.isArray(products) ? products : [];
                        const product = productsArray.find((p: any) => p.id === productId);
                        if (!product) return;
                        
                        // التحقق من وجود المنتج في القائمة
                        const existingProduct = editedProducts.find(p => p.productId === productId);
                        
                        // التحقق من توفر الكمية في المخزون
                        const stock = product.stock || 0;
                        
                        // استخراج منتجات الفاتورة الأصلية
                        const originalProducts = invoiceToEdit ? parseProducts(invoiceToEdit) : [];
                        
                        // العثور على نفس المنتج في الفاتورة الأصلية
                        const originalProduct = originalProducts.find(p => p.productId === productId);
                        const originalQuantity = originalProduct ? originalProduct.quantity : 0;
                        
                        // حساب الكمية المتاحة للإضافة = الاستوك الحالي + الكمية الأصلية في الفاتورة - الكمية المستخدمة بالفعل في الفاتورة المعدلة
                        const currentUsedQuantity = existingProduct ? existingProduct.quantity : 0;
                        const availableToAdd = stock + originalQuantity - currentUsedQuantity;
                        
                        if (availableToAdd <= 0) {
                          toast({
                            title: t('error'),
                            description: t('product_out_of_stock'),
                            variant: 'destructive',
                          });
                          return;
                        }
                        
                        // إذا كان المنتج موجود بالفعل في القائمة، نزيد الكمية بدلاً من إضافة سطر جديد
                        if (existingProduct) {
                          // زيادة الكمية بواحد فقط
                          updateProductQuantity(productId, existingProduct.quantity + 1);
                          return;
                        }
                        
                        // إضافة المنتج إلى القائمة
                        setEditedProducts([
                          ...editedProducts,
                          {
                            productId: product.id,
                            productName: product.name,
                            barcode: product.barcode,
                            quantity: 1,
                            price: product.sellingPrice,
                            purchasePrice: product.purchasePrice,
                            discount: 0,
                            total: product.sellingPrice
                          }
                        ]);
                        
                        // إعادة القائمة المنسدلة إلى الوضع الافتراضي
                        e.target.value = '';
                      }}
                    >
                      <option value="">{t('select_product')}</option>
                      {Array.isArray(products) && products.map((product: any) => (
                        <option key={product.id} value={product.id}>
                          {product.name} - {t('stock')}: {product.stock} - {t('price')}: {product.sellingPrice}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>
              
              {/* ملخص الفاتورة */}
              <div className="pt-4 border-t space-y-4">
                <div className="flex flex-col sm:flex-row justify-between gap-4">
                  {/* ملاحظات الفاتورة */}
                  <div className="space-y-1 flex-1">
                    <label htmlFor="notes" className="text-sm font-medium">
                      {t('notes')}
                    </label>
                    <Input
                      id="notes"
                      placeholder={t('enter_notes')}
                      value={editedNotes || ''}
                      onChange={(e) => setEditedNotes(e.target.value)}
                    />
                  </div>
                  
                  {/* خصم الفاتورة */}
                  <div className="space-y-1 w-full sm:w-48">
                    <label htmlFor="discount" className="text-sm font-medium">
                      {t('invoice_discount')}
                    </label>
                    <Input
                      id="discount"
                      type="number"
                      min="0"
                      step="0.01"
                      placeholder="0.00"
                      value={editedDiscount}
                      onChange={(e) => setEditedDiscount(Number(e.target.value))}
                    />
                  </div>
                </div>
                
                {/* إجماليات الفاتورة */}
                <div className="space-y-2 w-full sm:w-72 ml-auto">
                  <div className="flex justify-between">
                    <span className="text-sm">{t('subtotal')}:</span>
                    <span className="font-medium">
                      {editedProducts.reduce((sum, product) => sum + (product.price * product.quantity), 0).toFixed(2)}
                    </span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-sm">{t('products_discount')}:</span>
                    <span className="font-medium text-red-500">
                      -{editedProducts.reduce((sum, product) => sum + (product.discount || 0), 0).toFixed(2)}
                    </span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-sm">{t('invoice_discount')}:</span>
                    <span className="font-medium text-red-500">
                      -{editedDiscount.toFixed(2)}
                    </span>
                  </div>
                  
                  <Separator />
                  
                  <div className="flex justify-between">
                    <span className="font-medium">{t('total')}:</span>
                    <span className="font-bold">
                      {(
                        editedProducts.reduce((sum, product) => sum + (product.price * product.quantity), 0) -
                        editedProducts.reduce((sum, product) => sum + (product.discount || 0), 0) -
                        editedDiscount
                      ).toFixed(2)}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setEditDialogOpen(false)}
            >
              {t('cancel')}
            </Button>
            
            <Button
              type="submit"
              onClick={handleSaveInvoice}
              disabled={updateInvoiceMutation.isPending}
            >
              {updateInvoiceMutation.isPending ? (
                <>
                  <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent"></div>
                  {t('saving')}...
                </>
              ) : (
                t('save_changes')
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}